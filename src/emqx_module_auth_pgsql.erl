%%%-------------------------------------------------------------------
%%% @author root
%%% @copyright (C) 2020, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 29. 12月 2020 下午7:35
%%%-------------------------------------------------------------------
-module(emqx_module_auth_pgsql).
-author("root").

-export([on_module_create/2, on_module_destroy/2, on_module_status/2, on_module_update/4]).

-module_type(#{create => on_module_create, description =>
  #{en => <<80, 111, 115, 116, 103, 114, 101, 83, 81, 76, 32, 65, 85, 84, 72, 47, 65, 67, 76>>,
    zh =>
    <<80, 111, 115, 116, 103, 114, 101, 83, 81, 76, 32,
      232, 174, 164, 232, 175, 129, 47, 232, 174, 191, 233,
      151, 174, 230, 142, 167, 229, 136, 182>>},
  destroy => on_module_destroy,
  name => pgsql_authentication,
  params =>
  #{acl_query =>
  #{default =>
  <<115, 101, 108, 101, 99, 116, 32, 97, 108, 108,
    111, 119, 44, 32, 105, 112, 97, 100, 100, 114,
    44, 32, 117, 115, 101, 114, 110, 97, 109, 101,
    44, 32, 99, 108, 105, 101, 110, 116, 105, 100,
    44, 32, 97, 99, 99, 101, 115, 115, 44, 32, 116,
    111, 112, 105, 99, 32, 102, 114, 111, 109, 32,
    109, 113, 116, 116, 95, 97, 99, 108, 32, 119,
    104, 101, 114, 101, 32, 105, 112, 97, 100, 100,
    114, 32, 61, 32, 39, 37, 97, 39, 32, 111, 114,
    32, 117, 115, 101, 114, 110, 97, 109, 101, 32,
    61, 32, 39, 37, 117, 39, 32, 111, 114, 32, 117,
    115, 101, 114, 110, 97, 109, 101, 32, 61, 32,
    39, 36, 97, 108, 108, 39, 32, 111, 114, 32, 99,
    108, 105, 101, 110, 116, 105, 100, 32, 61, 32,
    39, 37, 99, 39>>,
    description =>
    #{en =>
    <<65, 67, 76, 32, 81, 117, 101, 114, 121>>,
      zh =>
      <<232, 174, 191, 233, 151, 174, 230, 142,
        167, 229, 136, 182, 32, 83, 81, 76, 32,
        232, 175, 173, 229, 143, 165>>},
    order => 9,
    title =>
    #{en =>
    <<65, 67, 76, 32, 81, 117, 101, 114, 121>>,
      zh =>
      <<232, 174, 191, 233, 151, 174, 230, 142,
        167, 229, 136, 182, 32, 83, 81, 76, 32,
        232, 175, 173, 229, 143, 165>>},
    type => string},
    auth_query =>
    #{default =>
    <<115, 101, 108, 101, 99, 116, 32, 112, 97, 115,
      115, 119, 111, 114, 100, 32, 102, 114, 111,
      109, 32, 109, 113, 116, 116, 95, 117, 115, 101,
      114, 32, 119, 104, 101, 114, 101, 32, 117, 115,
      101, 114, 110, 97, 109, 101, 32, 61, 32, 39,
      37, 117, 39, 32, 108, 105, 109, 105, 116, 32,
      49>>,
      description =>
      #{en =>
      <<65, 117, 116, 104, 32, 81, 117, 101, 114,
        121>>,
        zh =>
        <<232, 174, 164, 232, 175, 129, 32, 83, 81,
          76, 32, 232, 175, 173, 229, 143, 165>>},
      order => 8,
      title =>
      #{en =>
      <<65, 117, 116, 104, 32, 81, 117, 101, 114,
        121>>,
        zh =>
        <<232, 174, 164, 232, 175, 129, 32, 83, 81,
          76, 32, 232, 175, 173, 229, 143, 165>>},
      type => string},
    auto_reconnect =>
    #{default => true,
      description =>
      #{en =>
      <<73, 102, 32, 82, 101, 116, 114, 121, 32,
        87, 104, 101, 110, 32, 116, 104, 101, 32,
        67, 111, 110, 110, 101, 99, 116, 105,
        111, 110, 32, 76, 111, 115, 116>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 232, 191, 158, 230, 142, 165,
          230, 150, 173, 229, 188, 128, 230, 151,
          182, 230, 152, 175, 229, 144, 166, 233,
          135, 141, 232, 191, 158>>},
      order => 6,
      title =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 82, 101,
        99, 111, 110, 110, 101, 99, 116>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 233, 135,
          141, 232, 191, 158>>},
      type => boolean},
    cacertfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<67, 65, 32, 67, 101, 114, 116, 105, 102,
        105, 99, 97, 116, 101, 32, 70, 105, 108,
        101>>,
        zh =>
        <<67, 65, 32, 232, 175, 129, 228, 185, 166,
          230, 150, 135, 228, 187, 182>>},
      order => 15,
      title =>
      #{en =>
      <<67, 65, 32, 67, 101, 114, 116, 105, 102,
        105, 99, 97, 116, 101, 32, 70, 105, 108,
        101>>,
        zh =>
        <<67, 65, 32, 232, 175, 129, 228, 185, 166,
          230, 150, 135, 228, 187, 182>>},
      type => file},
    certfile =>
    #{default => <<>>,
      description =>
      #{en =>
      <<67, 101, 114, 116, 105, 102, 105, 99, 97,
        116, 101, 32, 70, 105, 108, 101>>,
        zh =>
        <<83, 83, 76, 32, 232, 175, 129, 228, 185,
          166, 230, 150, 135, 228, 187, 182>>},
      order => 14,
      title =>
      #{en =>
      <<67, 101, 114, 116, 105, 102, 105, 99, 97,
        116, 101, 32, 70, 105, 108, 101>>,
        zh =>
        <<232, 175, 129, 228, 185, 166, 230, 150,
          135, 228, 187, 182>>},
      type => file},
    database =>
    #{description =>
    #{en =>
    <<68, 97, 116, 97, 98, 97, 115, 101, 32,
      102, 111, 114, 32, 67, 111, 110, 110,
      101, 99, 116, 105, 110, 103, 32, 116,
      111, 32, 80, 111, 115, 116, 103, 114,
      101, 83, 81, 76>>,
      zh =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 230, 149, 176, 230, 141, 174,
        229, 186, 147, 229, 144, 141>>},
      order => 3, required => true,
      title =>
      #{en =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 68, 97, 116, 97, 98, 97, 115,
        101>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 230, 149, 176, 230, 141, 174,
          229, 186, 147, 229, 144, 141>>},
      type => string},
    keyfile =>
    #{default => <<>>,
      description =>
      #{en => <<75, 101, 121, 32, 70, 105, 108, 101>>,
        zh =>
        <<83, 83, 76, 32, 231, 167, 129, 233, 146,
          165, 230, 150, 135, 228, 187, 182>>},
      order => 13,
      title =>
      #{en => <<75, 101, 121, 32, 70, 105, 108, 101>>,
        zh =>
        <<231, 167, 129, 233, 146, 165, 230, 150,
          135, 228, 187, 182>>},
      type => file},
    password =>
    #{default => <<>>,
      description =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100, 32,
        102, 111, 114, 32, 67, 111, 110, 110,
        101, 99, 116, 105, 110, 103, 32, 116,
        111, 32, 80, 111, 115, 116, 103, 114,
        101, 83, 81, 76>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 229, 175, 134, 231, 160, 129>>},
      order => 5,
      title =>
      #{en =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 80, 97, 115, 115, 119, 111, 114,
        100>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 229, 175, 134, 231, 160, 129>>},
      type => password},
    password_hash =>
    #{default => <<115, 104, 97, 50, 53, 54>>,
      description =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100, 32,
        72, 97, 115, 104>>,
        zh =>
        <<229, 175, 134, 231, 160, 129, 229, 138,
          160, 229, 175, 134, 230, 150, 185, 229,
          188, 143>>},
      enum =>
      [<<112, 108, 97, 105, 110>>, <<109, 100, 53>>,
        <<115, 104, 97>>, <<115, 104, 97, 50, 53, 54>>,
        <<115, 104, 97, 53, 49, 50>>,
        <<98, 99, 114, 121, 112, 116>>,
        <<115, 97, 108, 116, 44, 112, 108, 97, 105,
          110>>,
        <<112, 108, 97, 105, 110, 44, 115, 97, 108,
          116>>,
        <<115, 97, 108, 116, 44, 109, 100, 53>>,
        <<109, 100, 53, 44, 115, 97, 108, 116>>,
        <<115, 97, 108, 116, 44, 115, 104, 97>>,
        <<115, 104, 97, 44, 115, 97, 108, 116>>,
        <<115, 97, 108, 116, 44, 115, 104, 97, 50, 53,
          54>>,
        <<115, 104, 97, 50, 53, 54, 44, 115, 97, 108,
          116>>,
        <<115, 97, 108, 116, 44, 115, 104, 97, 53, 49,
          50>>,
        <<115, 104, 97, 53, 49, 50, 44, 115, 97, 108,
          116>>,
        <<115, 97, 108, 116, 44, 98, 99, 114, 121, 112,
          116>>,
        <<98, 99, 114, 121, 112, 116, 44, 115, 97, 108,
          116>>],
      order => 7,
      title =>
      #{en =>
      <<80, 97, 115, 115, 119, 111, 114, 100, 32,
        72, 97, 115, 104>>,
        zh =>
        <<229, 138, 160, 229, 175, 134, 230, 150,
          185, 229, 188, 143>>},
      type => string},
    pool_size =>
    #{default => 8,
      description =>
      #{en =>
      <<84, 104, 101, 32, 83, 105, 122, 101, 32,
        111, 102, 32, 67, 111, 110, 110, 101, 99,
        116, 105, 111, 110, 32, 80, 111, 111,
        108, 32, 102, 111, 114, 32, 80, 111, 115,
        116, 103, 114, 101, 83, 81, 76>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 232, 191, 158, 230, 142, 165,
          230, 177, 160, 229, 164, 167, 229, 176,
          143>>},
      order => 2,
      title =>
      #{en =>
      <<80, 111, 111, 108, 32, 83, 105, 122,
        101>>,
        zh =>
        <<232, 191, 158, 230, 142, 165, 230, 177,
          160, 229, 164, 167, 229, 176, 143>>},
      type => number},
    query_timeout =>
    #{default => <<53, 115>>,
      description =>
      #{en =>
      <<81, 117, 101, 114, 121, 32, 84, 105, 109,
        101, 111, 117, 116>>,
        zh =>
        <<230, 159, 165, 232, 175, 162, 232, 182,
          133, 230, 156, 159, 230, 151, 182, 233,
          151, 180>>},
      order => 11,
      title =>
      #{en =>
      <<81, 117, 101, 114, 121, 32, 84, 105, 109,
        101, 111, 117, 116>>,
        zh =>
        <<230, 159, 165, 232, 175, 162, 232, 182,
          133, 230, 156, 159, 230, 151, 182, 233,
          151, 180>>},
      type => string},
    server =>
    #{default =>
    <<49, 50, 55, 46, 48, 46, 48, 46, 49, 58, 53, 52,
      51, 50>>,
      description =>
      #{en =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 73, 80, 32, 65, 100, 100, 114,
        101, 115, 115, 32, 111, 114, 32, 72, 111,
        115, 116, 110, 97, 109, 101, 32, 97, 110,
        100, 32, 80, 111, 114, 116>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 230, 156, 141, 229, 138, 161,
          229, 153, 168, 229, 156, 176, 229, 157,
          128>>},
      order => 1, required => true,
      title =>
      #{en =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 83, 101, 114, 118, 101, 114>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 230, 156, 141, 229, 138, 161,
          229, 153, 168>>},
      type => string},
    ssl =>
    #{default => false,
      description =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76>>,
        zh =>
        <<230, 152, 175, 229, 144, 166, 229, 188,
          128, 229, 144, 175, 32, 83, 83, 76>>},
      order => 12,
      title =>
      #{en =>
      <<69, 110, 97, 98, 108, 101, 32, 83, 83,
        76>>,
        zh =>
        <<229, 188, 128, 229, 144, 175, 32, 83, 83,
          76>>},
      type => boolean},
    super_query =>
    #{default =>
    <<115, 101, 108, 101, 99, 116, 32, 105, 115, 95,
      115, 117, 112, 101, 114, 117, 115, 101, 114,
      32, 102, 114, 111, 109, 32, 109, 113, 116, 116,
      95, 117, 115, 101, 114, 32, 119, 104, 101, 114,
      101, 32, 117, 115, 101, 114, 110, 97, 109, 101,
      32, 61, 32, 39, 37, 117, 39, 32, 108, 105, 109,
      105, 116, 32, 49>>,
      description =>
      #{en =>
      <<83, 117, 112, 101, 114, 85, 115, 101,
        114, 32, 81, 117, 101, 114, 121>>,
        zh =>
        <<232, 182, 133, 231, 186, 167, 231, 148,
          168, 230, 136, 183, 32, 83, 81, 76, 32,
          230, 159, 165, 232, 175, 162, 232, 175,
          173, 229, 143, 165>>},
      order => 10,
      title =>
      #{en =>
      <<83, 117, 112, 101, 114, 85, 115, 101,
        114, 32, 81, 117, 101, 114, 121>>,
        zh =>
        <<232, 182, 133, 231, 186, 167, 231, 148,
          168, 230, 136, 183, 32, 83, 81, 76, 32,
          230, 159, 165, 232, 175, 162, 232, 175,
          173, 229, 143, 165>>},
      type => string},
    user =>
    #{description =>
    #{en =>
    <<85, 115, 101, 114, 110, 97, 109, 101, 32,
      102, 111, 114, 32, 67, 111, 110, 110,
      101, 99, 116, 105, 110, 103, 32, 116,
      111, 32, 80, 111, 115, 116, 103, 114,
      101, 83, 81, 76>>,
      zh =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 231, 148, 168, 230, 136, 183,
        229, 144, 141>>},
      order => 4, required => true,
      title =>
      #{en =>
      <<80, 111, 115, 116, 103, 114, 101, 83, 81,
        76, 32, 85, 115, 101, 114, 32, 78, 97,
        109, 101>>,
        zh =>
        <<80, 111, 115, 116, 103, 114, 101, 83, 81,
          76, 32, 231, 148, 168, 230, 136, 183,
          229, 144, 141>>},
      type => string}},
  status => on_module_status,
  title =>
  #{en =>
  <<80, 111, 115, 116, 103, 114, 101, 83, 81, 76, 32, 65,
    85, 84, 72, 47, 65, 67, 76>>,
    zh =>
    <<80, 111, 115, 116, 103, 114, 101, 83, 81, 76, 32,
      232, 174, 164, 232, 175, 129, 47, 232, 174, 191, 233,
      151, 174, 230, 142, 167, 229, 136, 182>>},
  type => auth, update => on_module_update}).


on_module_create(ModuleId,
    Config = #{<<"server">> := Server, <<"user">> := User,
      <<"password">> := Password, <<"database">> := DB,
      <<"ssl">> := Ssl,
      <<"query_timeout">> := Timeout}) ->
  _ = application:ensure_all_started(ecpool),
  _ = application:ensure_all_started(epgsql),
  {Ip, Port} = emqx_module_utils:parse_host(Server),
  Options = [{host, Ip}, {port, Port},
    {username, binary_to_list(User)},
    {password, binary_to_list(Password)},
    {database, binary_to_list(DB)},
    {timeout, emqx_module_utils:parse_timeout(Timeout)},
    {auto_reconnect,
      case maps:get(<<"auto_reconnect">>, Config, true) of
        true -> 15;
        false -> false
      end},
    {encoding, utf8},
    {pool_size, maps:get(<<"pool_size">>, Config, 8)}],
  SslOptions = case Ssl of
                 true ->
                   [{ssl, true},
                     {ssl_opts,
                       emqx_module_utils:get_ssl_opts(Options, ModuleId)}];
                 _ -> []
               end,
  PoolName =
    start_resource(emqx_module_utils:pool_name(emqx_module_auth_pgsql,
      ModuleId),
      Options ++ SslOptions),
  case maps:get(<<"auth_query">>, Config, <<>>) of
    <<>> -> ok;
    AuthQuery0 ->
      HashType0 = maps:get(<<"password_hash">>, Config,
        <<"sha256">>),
      HashType =
        emqx_module_utils:password_hash(b2l(HashType0)),
      SuperQuery = case maps:get(<<"super_query">>, Config,
        <<>>)
                   of
                     <<>> -> undefined;
                     S -> epgsql_parse(PoolName, super_query, b2l(S))
                   end,
      AuthQuery = epgsql_parse(PoolName, auth_query,
        b2l(AuthQuery0)),
      load_auth_hook(PoolName,
        emqx_module_utils:parse_timeout(Timeout), AuthQuery,
        SuperQuery, HashType)
  end,
  case maps:get(<<"acl_query">>, Config, <<>>) of
    <<>> -> ok;
    AclQuery0 ->
      AclQuery = epgsql_parse(PoolName, acl_query,
        b2l(AclQuery0)),
      load_acl_hook(PoolName,
        emqx_module_utils:parse_timeout(Timeout), AclQuery)
  end,
  #{<<"pool">> => PoolName}.

on_module_destroy(_ModuleId,
    #{<<"pool">> := PoolName}) ->
  stop_resource(PoolName).

on_module_status(_ModuleId, #{}) -> #{is_alive => true}.

on_module_update(_ModuleId, Params, Config, Config) ->
  Params;
on_module_update(ModuleId, Params, _OldConfig,
    Config) ->
  on_module_destroy(ModuleId, Params),
  on_module_create(ModuleId, Config).

start_resource(PoolName, Options) ->
  {ok, _} = ecpool:start_sup_pool(PoolName,
    emqx_auth_pgsql_cli, Options),
  PoolName.

stop_resource(PoolName) ->
  emqx:unhook('client.authenticate',
    fun emqx_auth_pgsql:check/3),
  emqx:unhook('client.check_acl',
    fun emqx_acl_pgsql:check_acl/5),
  ecpool:stop_sup_pool(PoolName).

load_auth_hook(PoolName, Timeout, AuthQuery, SuperQuery,
    HashType) ->
  ok = emqx_auth_pgsql:register_metrics(),
  Config = #{auth_query => AuthQuery,
    super_query => SuperQuery, hash_type => HashType,
    timeout => Timeout, pool => PoolName},
  emqx:hook('client.authenticate',
    fun emqx_auth_pgsql:check/3, [Config]).

load_acl_hook(PoolName, Timeout, AclQuery) ->
  ok = emqx_acl_pgsql:register_metrics(),
  Config = #{acl_query => AclQuery, timeout => Timeout,
    pool => PoolName},
  emqx:hook('client.check_acl',
    fun emqx_acl_pgsql:check_acl/5, [Config]).

pgvar(Sql, Params) ->
  Vars = ["$" ++ integer_to_list(I)
    || I <- lists:seq(1, length(Params))],
  lists:foldl(fun ({Param, Var}, S) ->
    re:replace(S, Param, Var, [{return, list}])
              end,
    Sql, lists:zip(Params, Vars)).

epgsql_parse(PoolName, Par, Sql) ->
  {Par1, Params} = emqx_auth_pgsql_cli:parse_query(Par,
    Sql),
  Sql1 = pgvar(Sql, Params),
  [begin
     {ok, Pid} = ecpool_worker:client(Worker),
     epgsql:parse(Pid, Par1, Sql1, [])
   end
    || {_WorkerName, Worker} <- ecpool:workers(PoolName)],
  {Par1, Params}.

b2l(B) -> binary_to_list(B).

